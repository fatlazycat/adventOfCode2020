/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package adventOfCode2020

import kotlin.test.Test

class Day3 {
    @Test fun testDay3() {
        val testData = getFileAsListOfLines("/day3")
        val data: Map<Pair<Int, Int>, Char> = testData.mapIndexed{ rowIndex, row -> row.mapIndexed{ colIndex, cell -> Pair(Pair(colIndex, rowIndex), cell)}}.flatten().toMap()
        val beyondRow = testData.size

        assert(numTrees(3,1, data, beyondRow) == 268)
    }

    @Test fun testDay3PartTwo() {
        val testData = getFileAsListOfLines("/day3")
        val data: Map<Pair<Int, Int>, Char> = testData.mapIndexed{ rowIndex, row -> row.mapIndexed{ colIndex, cell -> Pair(Pair(colIndex, rowIndex), cell)}}.flatten().toMap()
        val beyondRow = testData.size
        val v1 = numTrees(1,1, data, beyondRow).toLong()
        val v2 = numTrees(3,1, data, beyondRow).toLong()
        val v3 = numTrees(5,1, data, beyondRow).toLong()
        val v4 = numTrees(7,1, data, beyondRow).toLong()
        val v5 = numTrees(1,2, data, beyondRow).toLong()

        assert(v1 * v2 * v3 * v4 * v5 == 3093068400)
    }

    private fun numTrees(col: Int, row: Int, data: Map<Pair<Int, Int>, Char>, size: Int) : Int {
        val path = (row..size step row).map { i -> Pair((col * (i/row)).rem(31), i) }
        return path.map { p -> isTree(p.first, p.second, data) }.sum()
    }

    private fun isTree(col: Int, row: Int, data: Map<Pair<Int, Int>, Char>) = if (data[Pair(col,row)] == '#') 1 else 0
}
